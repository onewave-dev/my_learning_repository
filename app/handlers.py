from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, ApplicationHandlerStop
from telegram.error import TelegramError, TimedOut

from datetime import datetime, timezone

import logging
log = logging.getLogger("app.handlers")  # –¥–æ—á–µ—Ä–Ω–∏–π –ª–æ–≥–≥–µ—Ä

THROTTLE_SECONDS = 1.0  # –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç —Å–ø–∞–º–∞, –≤—Ä–µ–º—è –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ–¥ —Å–µ–±—è

# –≥–ª–æ–±–∞–ª—å–Ω—ã–π throttle (–∑–∞—â–∏—Ç–∞ –æ—Ç –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏–π)
async def global_throttle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è –ª—é–±–æ–≥–æ –∞–ø–¥–µ–π—Ç–∞."""
    # 1) –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤)
    user = getattr(update, "effective_user", None)
    user_id = getattr(user, "id", None)
    if user_id is None:
        return  # –Ω–µ –∑–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –Ω–µ —Ç—Ä–æ—Ç—Ç–ª–∏–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ

    # 2) —Å–º–æ—Ç—Ä–∏–º, –∫–æ–≥–¥–∞ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—Å–∞–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑
    now = datetime.now(timezone.utc).timestamp()
    last = context.user_data.get("last_msg_ts", 0.0)

    # 3) –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–≤–µ–π–µ—Ä —Ü–µ–ª–∏–∫–æ–º
    if now - last < THROTTLE_SECONDS:
        # –ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–ø–∞–º–∏—Ç—å):
        if getattr(update, "effective_message", None):
            await update.effective_message.reply_text("–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ üôÇ")
            raise ApplicationHandlerStop()  # ‚Üê –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞: ¬´–ø—Ä–æ–≥–ª–∞—Ç—ã–≤–∞–µ–º¬ª –∞–ø–¥–µ–π—Ç

    # 4) –∏–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
    context.user_data["last_msg_ts"] = now
    return  # –æ–±—ã—á–Ω—ã–π –≤—ã—Ö–æ–¥: —Å–ª–µ–¥—É—é—â–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤
    # 1) –¥–æ—Å—Ç–∞—ë–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–∏–ª–∏ 0, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç)
    visits = context.user_data.get("visits", 0)

    # 2) —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1
    visits += 1
    context.user_data["visits"] = visits

    # 3) —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    text = (
        f"–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π –±–æ—Ç üôÇ\n"
        f"–¢—ã –∑–∞–ø—É—Å–∫–∞–ª –∫–æ–º–∞–Ω–¥—É /start —É–∂–µ {visits} —Ä–∞–∑(–∞)."
    )
    await update.message.reply_text(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—ç—Ö–æ)
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–¢—ã —Å–∫–∞–∑–∞–ª: {update.message.text}")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è\n"
        "/help ‚Äî —á–µ–º —è —É–º–µ—é –ø–æ–º–æ–≥–∞—Ç—å\n"
        "/settings ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç ‚Äî —è –æ—Ç–≤–µ—á—É —ç—Ö–æ–º."
    )
    await update.message.reply_text(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
ASK_NAME = 0  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞

async def survey_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return ASK_NAME

async def survey_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.text
    context.user_data["name"] = user_name   # üìù —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å user_data
    await update.message.reply_text(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}!")
    return ConversationHandler.END

async def survey_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

async def non_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º/–∫–æ–º–∞–Ω–¥–æ–π
    await update.message.reply_text(
        "–Ø –ø–æ–∫–∞ –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üôÇ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help"
    )

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ /help
    await update.message.reply_text("–ù–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏ /help üôÇ")
    
async def whoami(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data.get("name")
    if name:
        await update.message.reply_text(f"–¢—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –∫–∞–∫: {name}")
    else:
        await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç. –ó–∞–ø—É—Å—Ç–∏ /survey üôÇ")



# /settings ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏
async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # 1) —á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–ø–∏—Å–∫–∞)
    is_subscribed = bool(context.user_data.get("subscribed"))

    # 2) —Å–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥)
    keyboard = [
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –í–ö–õ" if is_subscribed else "üîî –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                callback_data="settings:toggle_sub"
            ),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # 3) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=reply_markup)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑ /settings
async def settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –≤–∞–∂–Ω–æ: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞–∂–∞—Ç–∏–µ, —á—Ç–æ–±—ã Telegram —É–±—Ä–∞–ª "—á–∞—Å–∏–∫–∏"

    # 1) –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞
    if query.data == "settings:toggle_sub":
        # 2) –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ –≤ user_data
        is_subscribed = bool(context.user_data.get("subscribed"))
        context.user_data["subscribed"] = not is_subscribed
        new_state = "–≤–∫–ª—é—á–µ–Ω–∞" if context.user_data["subscribed"] else "–≤—ã–∫–ª—é—á–µ–Ω–∞"

        # 3) –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –í–ö–õ" if context.user_data["subscribed"] else "üîî –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data="settings:toggle_sub"
                ),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n–ü–æ–¥–ø–∏—Å–∫–∞ {new_state}.",
            reply_markup=reply_markup
        )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    # 1) –¢–∏—Ö–æ –ª–æ–≥–∏—Ä—É–µ–º —Å—Ç–µ–∫ —Å –º–∞–∫—Å–∏–º—É–º–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_id = getattr(getattr(update, "effective_user", None), "id", None)
    chat_id = getattr(getattr(update, "effective_chat", None), "id", None)
    update_type = type(update).__name__ if update else "None"
    log.exception("Handler error | user=%s chat=%s update=%s", user_id, chat_id, update_type)
    context.application.logger.exception(
        "Handler error | user=%s chat=%s update=%s",
        user_id, chat_id, update_type
    )


    # 2) –ê–∫–∫—É—Ä–∞—Ç–Ω–æ —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å)
    try:
        if update and getattr(update, "effective_message", None):
            await update.effective_message.reply_text(
                "–£–ø—Å‚Ä¶ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."
            )
    except (TelegramError, TimedOut):
        # –µ—Å–ª–∏ –¥–∞–∂–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –º–æ–ª—á–∏–º
        pass