from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, ApplicationHandlerStop
from telegram.error import TelegramError, TimedOut, BadRequest, Forbidden
from telegram.constants import ChatAction, MessageEntityType
import logging

import asyncio

from datetime import datetime, timezone

import logging
log = logging.getLogger("app.handlers")  # –¥–æ—á–µ—Ä–Ω–∏–π –ª–æ–≥–≥–µ—Ä

THROTTLE_SECONDS = 1.0  # –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç —Å–ø–∞–º–∞, –≤—Ä–µ–º—è –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ–¥ —Å–µ–±—è

# –≥–ª–æ–±–∞–ª—å–Ω—ã–π throttle (–∑–∞—â–∏—Ç–∞ –æ—Ç –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏–π)
async def global_throttle(update, context):
    """
    –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤—Å–µ–≥–¥–∞.
    –¢—Ä–æ—Ç—Ç–ª–∏—Ç —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ.
    –†–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –Ω–∞ Message updates (—Å–º. —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∏–∂–µ).
    """
    msg = getattr(update, "effective_message", None)
    if not msg:
        return  # –Ω–µ message-–∞–ø–¥–µ–π—Ç -> –Ω–∞—Å —ç—Ç–æ –Ω–µ –∫–∞—Å–∞–µ—Ç—Å—è

    # 1) –ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ–≥–¥–∞ (–∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º last_msg_ts)
    if (msg.entities and any(ent.type == MessageEntityType.BOT_COMMAND for ent in msg.entities)) \
       or (msg.text and msg.text.startswith("/")):
        return

    now = datetime.now(timezone.utc).timestamp()
    try:
        last = float(context.user_data.get("last_msg_ts", 0.0))
    except Exception:
        last = 0.0

    # 2) –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ ‚Äî —Å—Ç–æ–ø–∏–º —Ü–µ–ø–æ—á–∫—É —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ (–Ω–æ –±–µ–∑ –ø–∞–¥–µ–Ω–∏–π)
    if last and (now - last) < THROTTLE_SECONDS:
        raise ApplicationHandlerStop()

    # 3) –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º—Å—Ç–∞–º–ø –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
    context.user_data["last_msg_ts"] = now

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log.debug("start(): entered")
    # —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤
    # 1) –¥–æ—Å—Ç–∞—ë–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–∏–ª–∏ 0, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç)
    visits = context.user_data.get("visits", 0)

    # 2) —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1
    visits += 1
    context.user_data["visits"] = visits

    # 3) —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    text = (
        f"–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π –±–æ—Ç üôÇ\n"
        f"–¢—ã –∑–∞–ø—É—Å–∫–∞–ª –∫–æ–º–∞–Ω–¥—É /start —É–∂–µ {visits} —Ä–∞–∑(–∞)."
    )
    await update.message.reply_text(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—ç—Ö–æ)
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–¢—ã —Å–∫–∞–∑–∞–ª: {update.message.text}")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log.debug("help(): entered")
    text = (
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è\n"
        "/help ‚Äî —á–µ–º —è —É–º–µ—é –ø–æ–º–æ–≥–∞—Ç—å\n"
        "/settings ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç ‚Äî —è –æ—Ç–≤–µ—á—É —ç—Ö–æ–º."
    )
    await update.message.reply_text(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
ASK_NAME = 0  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞

async def survey_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log.debug("start(): entered")
    # üîπ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤–æ–ø—Ä–æ—Å–∞
    await update.message.chat.send_action(ChatAction.TYPING)
    await asyncio.sleep(2)  # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è "–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"
    await update.message.reply_text("–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return ASK_NAME

async def survey_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.text
    context.user_data["name"] = user_name   # üìù —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å user_data
    await update.message.reply_text(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}!")
    return ConversationHandler.END

async def survey_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

async def non_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º/–∫–æ–º–∞–Ω–¥–æ–π
    await update.message.reply_text(
        "–Ø –ø–æ–∫–∞ –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üôÇ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help"
    )

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ /help
    await update.message.reply_text("–ù–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏ /help üôÇ")
    
async def whoami(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data.get("name")
    if name:
        await update.message.reply_text(f"–¢—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –∫–∞–∫: {name}")
    else:
        await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç. –ó–∞–ø—É—Å—Ç–∏ /survey üôÇ")



# /settings ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏
async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.chat.send_action(ChatAction.TYPING)
    await asyncio.sleep(1.2)
    # 1) —á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–ø–∏—Å–∫–∞)
    is_subscribed = bool(context.user_data.get("subscribed"))

    # 2) —Å–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥)
    keyboard = [
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –í–ö–õ" if is_subscribed else "üîî –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                callback_data="settings:toggle_sub"
            ),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # 3) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=reply_markup)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑ /settings
async def settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –≤–∞–∂–Ω–æ: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞–∂–∞—Ç–∏–µ, —á—Ç–æ–±—ã Telegram —É–±—Ä–∞–ª "—á–∞—Å–∏–∫–∏"

    # 1) –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞
    if query.data == "settings:toggle_sub":
        # 2) –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ –≤ user_data
        is_subscribed = bool(context.user_data.get("subscribed"))
        context.user_data["subscribed"] = not is_subscribed
        new_state = "–≤–∫–ª—é—á–µ–Ω–∞" if context.user_data["subscribed"] else "–≤—ã–∫–ª—é—á–µ–Ω–∞"

        # 3) –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –í–ö–õ" if context.user_data["subscribed"] else "üîî –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data="settings:toggle_sub"
                ),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n–ü–æ–¥–ø–∏—Å–∫–∞ {new_state}.",
            reply_markup=reply_markup
        )

async def error_handler(update: object, context):
    try:
        user_id = getattr(getattr(update, "effective_user", None), "id", None)
        chat_id = getattr(getattr(update, "effective_chat", None), "id", None)
        update_type = type(update).__name__ if update else "None"

        exc = getattr(context, "error", None)

        if exc is not None:
            # –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º traceback, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "NoneType: None"
            log.error(
                "Handler error | user=%s chat=%s update=%s: %s",
                user_id, chat_id, update_type, exc,
                exc_info=(type(exc), exc, exc.__traceback__),
            )
        else:
            # –ù–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ context.error ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å—Ç–µ–∫–∞
            log.error("Handler error | user=%s chat=%s update=%s (no context.error)",
                      user_id, chat_id, update_type)

        # –ê–∫–∫—É—Ä–∞—Ç–Ω–æ —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å –∫—É–¥–∞ –ø–∏—Å–∞—Ç—å
        msg = getattr(update, "effective_message", None)
        if msg:
            try:
                await msg.reply_text("–£–ø—Å‚Ä¶ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            except (BadRequest, Forbidden, TelegramError, TimedOut):
                # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–æ–Ω—è–µ–º error_handler –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤—ã—Ö/–ø—Ä–∞–≤–æ–≤—ã—Ö –æ—à–∏–±–æ–∫
                pass

    except Exception as e:
        # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
        logging.getLogger("app.handlers").error(
            "error_handler() failed safely: %s", e, exc_info=True
        )