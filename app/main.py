import os
import logging
import json
import asyncio

from fastapi import FastAPI, Request, HTTPException
from telegram import Update
from telegram.ext import (Application, CommandHandler, MessageHandler,
    filters, ConversationHandler, BasePersistence, CallbackQueryHandler,
    TypeHandler
)
from supabase import create_client
from app.handlers import (
    start, echo, help_command,
    survey_start, survey_name, survey_cancel, ASK_NAME, whoami,
    settings_command, settings_callback, error_handler,
    unknown_command, non_text, global_throttle
)
from contextlib import asynccontextmanager

# --- –í–ï–†–• –§–ê–ô–õ–ê (—Ä—è–¥–æ–º —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏) ---
def _probe(tag):
    async def _inner(update, context):
        msg = getattr(update, "effective_message", None)
        txt = getattr(msg, "text", None)
        log.warning("PROBE %s | has_message=%s | text=%r | entities=%s",
                    tag, bool(msg), txt,
                    getattr(msg, "entities", None))
    return _inner

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è 
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "jslkdji&8987812kjkj9989l_lki")
PUBLIC_URL = os.getenv("PUBLIC_URL", "").rstrip("/")
DATA_PATH = os.getenv("DATA_PATH", "/var/data")


DEBUG = os.getenv("DEBUG", "false").lower() in {"1", "true", "yes", "on"}
logging.basicConfig(
    level=logging.DEBUG if DEBUG else logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
)
# –ü—Ä–∏–≥–ª—É—à–∞–µ–º –±–æ–ª—Ç–ª–∏–≤—ã–µ –ª–æ–≥–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫, —á—Ç–æ–±—ã –Ω–µ —Å–≤–µ—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω
logging.getLogger("telegram").setLevel(logging.DEBUG)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)
logging.getLogger("httpx").setLevel(logging.WARNING)         # —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
logging.getLogger("app.handlers").setLevel(logging.DEBUG)
log = logging.getLogger("app")

# —É—Å—Ç–Ω–æ–≤–∫–∞ persistence
class SupabasePersistence(BasePersistence):
    def __init__(self, url, key):
        super().__init__(store_user_data=True, store_chat_data=True, store_bot_data=True)
        self.client = create_client(url, key)
        self.table = "bot_state"

    async def _load(self, key):
        res = self.client.table(self.table).select("data").eq("id", key).execute()
        if res.data:
            return res.data[0]["data"]
        return {}

    async def _save(self, key, data):
        self.client.table(self.table).upsert({"id": key, "data": data}).execute()

    async def get_user_data(self):
        return await self._load("user_data")

    async def update_user_data(self, user_id, data):
        await self._save(f"user_{user_id}", data)

    async def get_chat_data(self):
        return await self._load("chat_data")

    async def update_chat_data(self, chat_id, data):
        await self._save(f"chat_{chat_id}", data)

    async def get_bot_data(self):
        return await self._load("bot_data")

    async def update_bot_data(self, data):
        await self._save("bot_data", data)

    async def flush(self):
        # –º–µ—Ç–æ–¥ –¥–ª—è PTB (–∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ)
        pass

@asynccontextmanager
async def lifespan(app: FastAPI):
    # --- —Å—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    if not TELEGRAM_BOT_TOKEN:
        log.error("TELEGRAM_BOT_TOKEN is empty ‚Äî set it in env")
        raise RuntimeError("No TELEGRAM_BOT_TOKEN")
    
    # üîπ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–∞–Ω—Ç–∞–π–º–µ –Ω–∞ –¥–∏—Å–∫–µ)
    os.makedirs(DATA_PATH, exist_ok=True)


    # üîπ —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –¥–∏—Å–∫–µ
    SUPABASE_URL = os.getenv("SUPABASE_URL")
    SUPABASE_KEY = os.getenv("SUPABASE_KEY") 
    persistence = SupabasePersistence(SUPABASE_URL, SUPABASE_KEY)
    
    tg_app = (
    Application.builder()
    .token(TELEGRAM_BOT_TOKEN)
    .persistence(persistence)
    .build()
    )

    # ‚¨áÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã PTB
    tg_app.add_handler(MessageHandler(filters.ALL, _probe("A:TOP"), block=False), group=0) # 0a. –ó–æ–Ω–¥ –¥–æ –≤—Å–µ–≥–æ (–æ–Ω –ù–ï –±–ª–æ–∫–∏—Ä—É–µ—Ç)
    tg_app.add_handler(MessageHandler(filters.ALL, global_throttle, block=False), group=0) # –≤—Å–µ–≥–¥–∞ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
    # 0c. –ó–æ–Ω–¥ –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –∫–æ–º–∞–Ω–¥–∞–º–∏ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –¥–æ —Å—é–¥–∞ –¥–æ—à–ª–æ)
    tg_app.add_handler(MessageHandler(filters.ALL, _probe("B:BEFORE_CMDS"), block=False), group=0)
    tg_app.add_handler(CommandHandler("start", start))
    log.info("Start handler registered")
    tg_app.add_handler(CommandHandler("whoami", whoami))
    tg_app.add_handler(CommandHandler("help", help_command))
    tg_app.add_handler(CommandHandler("settings", settings_command))

    # 1b. –ó–æ–Ω–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥
    tg_app.add_handler(MessageHandler(filters.ALL, _probe("C:AFTER_CMDS"), block=False), group=0)
    tg_app.add_handler(CallbackQueryHandler(settings_callback, pattern=r"^settings:"))
    # –î–∏–∞–ª–æ–≥: /survey -> —Å–ø—Ä–æ—Å–∏—Ç—å –∏–º—è -> –æ—Ç–≤–µ—Ç -> –∑–∞–≤–µ—Ä—à–∏—Ç—å
    conv = ConversationHandler(
        entry_points=[CommandHandler("survey", survey_start)],  # —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ /survey
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, survey_name)],  # –∂–¥—ë–º —Ç–µ–∫—Å—Ç –∏–º–µ–Ω–∏
        },
        fallbacks=[CommandHandler("cancel", survey_cancel)],  # /cancel –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ ‚Äî –≤—ã—Ö–æ–¥
        allow_reentry=True,  # –ø–æ–∑–≤–æ–ª–∏—Ç –∑–∞–Ω–æ–≤–æ –∑–∞–π—Ç–∏ –≤ –¥–∏–∞–ª–æ–≥, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –Ω—ë–º
    )
    tg_app.add_handler(conv)
    tg_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    tg_app.add_handler(MessageHandler(~filters.TEXT & ~filters.COMMAND, non_text))     # –≤—Å—ë, —á—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç –∏ –Ω–µ –∫–æ–º–∞–Ω–¥—ã: —Ñ–æ—Ç–æ, —Å—Ç–∏–∫–µ—Ä—ã, —Ñ–∞–π–ª—ã –∏ —Ç.–¥.
    tg_app.add_error_handler(error_handler)
    tg_app.add_handler(MessageHandler(filters.COMMAND, unknown_command))     # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –î–û–õ–ñ–ï–ù –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.state.tg_app = tg_app
    log.info("PTB Application created")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    await tg_app.initialize()   # –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã PTB (—Å–µ—Å—Å–∏–∏, –ª—É–ø –∏ —Ç.–¥.)
    await tg_app.start()        # –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ PTB, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å update_queue
    log.info("PTB Application started")

    # –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –≤ –∫–ª–∏–µ–Ω—Ç–µ Telegram
    await tg_app.bot.set_my_commands([
        ("start", "–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è –∏ —É–≤–∏–¥–µ—Ç—å —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤"),
        ("help", "–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç"),
        ("survey", "–ú–∏–Ω–∏-–æ–ø—Ä–æ—Å: —Å–ø—Ä–æ—Å–∏—Ç—å –∏–º—è"),
        ("settings", "–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏"),
        ("whoami", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∏–º—è"),
    ])
    log.info("Bot commands are set")

    if not PUBLIC_URL:
        log.error("PUBLIC_URL is empty ‚Äî set it in env")
        raise RuntimeError("No PUBLIC_URL")

    webhook_url = f"{PUBLIC_URL}/webhook"
    await tg_app.bot.set_webhook(
        url=webhook_url,
        secret_token=WEBHOOK_SECRET,      # Telegram –ø—Ä–∏—à–ª—ë—Ç —ç—Ç–æ—Ç —Å–µ–∫—Ä–µ—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        drop_pending_updates=True,        # –Ω–µ —Ç—è–Ω—É—Ç—å ¬´—Å—Ç–∞—Ä—ã–µ¬ª –∞–ø–¥–µ–π—Ç—ã
        allowed_updates=["message", "callback_query"]
    )
    log.info("Webhook set to %s", webhook_url) 

    yield

    # --- –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    tg_app = getattr(app.state, "tg_app", None)
    if tg_app:
        await tg_app.stop()       # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏)
        await tg_app.shutdown()   # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
        log.info("PTB Application stopped")

app = FastAPI(lifespan=lifespan)

@app.get("/healthz")
async def healthz():
    log.debug("Health check requested")
    return {"status": "ok"}

@app.post("/webhook")
async def telegram_webhook(request: Request):  
    # –ø—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç Telegram
    header_secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if header_secret != WEBHOOK_SECRET:
        log.warning("Webhook header secret mismatch")
        raise HTTPException(status_code=403, detail="bad header secret")
    log.debug("Header OK, update accepted")

    # 1) –ß–∏—Ç–∞–µ–º JSON –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    data = await request.json()

    # 2) –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º JSON –≤ –æ–±—ä–µ–∫—Ç Update (—ç—Ç–æ PTB-—à–Ω—ã–π –∫–ª–∞—Å—Å)
    update = Update.de_json(data, app.state.tg_app.bot)

    # 3) –ö–ª–∞–¥—ë–º Update –≤ –æ—á–µ—Ä–µ–¥—å PTB
    # await app.state.tg_app.update_queue.put(update)

    # 3a) ‚úÖ –ù–∞–ø—Ä—è–º—É—é –ø–µ—Ä–µ–¥–∞—ë–º –∞–ø–¥–µ–π—Ç –≤ PTB (–º–∏–Ω—É—è –æ—á–µ—Ä–µ–¥—å)
    await app.state.tg_app.process_update(update)

    log.debug("Update forwarded to PTB")
    return {"ok": True}

