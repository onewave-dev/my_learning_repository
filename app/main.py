import os
import logging
import tempfile
import asyncio

from fastapi import FastAPI, Request, HTTPException
from telegram import Update
from telegram.ext import (Application, CommandHandler, MessageHandler,
    filters, ConversationHandler, CallbackQueryHandler
)
from supabase import create_client, Client
from app.handlers import (
    start, echo, help_command,
    survey_start, survey_name, survey_cancel, ASK_NAME, whoami,
    settings_command, settings_callback, error_handler,
    unknown_command, non_text, global_throttle
)
from contextlib import asynccontextmanager
from app.supabase_persistence import SupabasePersistence
log = logging.getLogger("app")
# --- –í–ï–†–• –§–ê–ô–õ–ê (—Ä—è–¥–æ–º —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏) ---
def _probe(tag):
    async def _inner(update, context):
        msg = getattr(update, "effective_message", None)
        txt = getattr(msg, "text", None)
        log.warning("PROBE %s | has_message=%s | text=%r | entities=%s",
                    tag, bool(msg), txt,
                    getattr(msg, "entities", None))
    return _inner

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è 
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "jslkdji&8987812kjkj9989l_lki")
PUBLIC_URL = os.getenv("PUBLIC_URL", "").rstrip("/")


# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    level=logging.INFO  # ‚Üê –≤–º–µ—Å—Ç–æ DEBUG
)

# ‚úÖ –û—Ç–∫–ª—é—á–∞–µ–º –±–æ–ª—Ç–ª–∏–≤—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
for noisy in ["hpack", "httpcore", "httpx", "urllib3"]:
    logging.getLogger(noisy).setLevel(logging.WARNING)

# –ü—Ä–∏–≥–ª—É—à–∞–µ–º –±–æ–ª—Ç–ª–∏–≤—ã–µ –ª–æ–≥–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫, —á—Ç–æ–±—ã –Ω–µ —Å–≤–µ—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω
logging.getLogger("telegram").setLevel(logging.INFO)
logging.getLogger("uvicorn.access").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.INFO)
logging.getLogger("app.handlers").setLevel(logging.DEBUG)
log = logging.getLogger("app")


@asynccontextmanager
async def lifespan(app: FastAPI):
    # --- —Å—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    if not TELEGRAM_BOT_TOKEN:
        log.error("TELEGRAM_BOT_TOKEN is empty ‚Äî set it in env")
        raise RuntimeError("No TELEGRAM_BOT_TOKEN")

    # üîπ —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –¥–∏—Å–∫–µ
    SUPABASE_URL = os.getenv("SUPABASE_URL")
    SUPABASE_KEY = os.getenv("SUPABASE_KEY") 
    if not (SUPABASE_URL and SUPABASE_KEY):
        log.error("SUPABASE_URL/SUPABASE_KEY are required in env for persistence")
        raise RuntimeError("Supabase credentials are missing")

    # ‚úÖ –¢–æ–ª—å–∫–æ SupabasePersistence
    persistence = SupabasePersistence(SUPABASE_URL, SUPABASE_KEY)

    # üîé Fail-fast: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ë–î/—Ç–∞–±–ª–∏—Ü–µ –ø—Ä—è–º–æ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
    try:
        await persistence.health_check()   # –¥–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –Ω–∏–∂–µ –≤ –∫–ª–∞—Å—Å–µ
        log.info("Supabase health-check OK ‚Äî running in Supabase-only mode")
    except Exception as e:
        log.exception("Supabase health-check FAILED: %s", e)
        raise RuntimeError(f"Supabase is not available: {e}")
    
    tg_app = (
        Application.builder()
        .token(TELEGRAM_BOT_TOKEN)
        .persistence(persistence)
        .build()
    )

    # ‚¨áÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã PTB
    # 0) –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω–¥—ã ‚Äî —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É—é—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç
    tg_app.add_handler(MessageHandler(filters.ALL, _probe("A:TOP"), block=False), group=-1100)

    # 1) –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–æ—Ç—Ç–ª–µ—Ä ‚Äî –î–û –≤—Å–µ–≥–æ; –∫–æ–º–∞–Ω–¥—ã –∏ callback –æ–Ω –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ä–∞–Ω–Ω–∏–º return
    tg_app.add_handler(MessageHandler(filters.ALL, global_throttle, block=False), group=-1000)

    # 2) –ó–æ–Ω–¥ –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –∫–æ–º–∞–Ω–¥–∞–º–∏
    tg_app.add_handler(MessageHandler(filters.ALL, _probe("B:BEFORE_CMDS"), block=False), group=-200)

    # 3) –ö–û–ú–ê–ù–î–´ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–æ–π –î–û –ª—é–±—ã—Ö catch-all
    tg_app.add_handler(CommandHandler("start", start), group=-100)
    tg_app.add_handler(CommandHandler("whoami", whoami), group=-100)
    tg_app.add_handler(CommandHandler("help", help_command), group=-100)
    tg_app.add_handler(CommandHandler("settings", settings_command), group=-100)

    # 4) –ó–æ–Ω–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥
    tg_app.add_handler(MessageHandler(filters.ALL, _probe("C:AFTER_CMDS"), block=False), group=-50)

    # 5) CallbackQuery ‚Äî –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥
    tg_app.add_handler(CallbackQueryHandler(settings_callback), group=0)

    # 6) –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–ù–ï –∫–æ–º–∞–Ω–¥—ã)
    tg_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo), group=0)
    tg_app.add_handler(MessageHandler(~filters.TEXT & ~filters.COMMAND, non_text), group=0)

    # 7) –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚Äî –°–ê–ú–û–ï –ü–û–°–õ–ï–î–ù–ï–ï
    tg_app.add_handler(MessageHandler(filters.COMMAND, unknown_command), group=-100)   
        
    # 
    app.state.tg_app = tg_app
    log.info("PTB Application created")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    await tg_app.initialize()   # –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã PTB (—Å–µ—Å—Å–∏–∏, –ª—É–ø –∏ —Ç.–¥.)
    await tg_app.start()        # –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ PTB, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å update_queue
    log.info("PTB Application started")

    # –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –≤ –∫–ª–∏–µ–Ω—Ç–µ Telegram
    await tg_app.bot.set_my_commands([
        ("start", "–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è –∏ —É–≤–∏–¥–µ—Ç—å —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤"),
        ("help", "–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç"),
        ("survey", "–ú–∏–Ω–∏-–æ–ø—Ä–æ—Å: —Å–ø—Ä–æ—Å–∏—Ç—å –∏–º—è"),
        ("settings", "–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏"),
        ("whoami", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∏–º—è"),
    ])
    log.info("Bot commands are set")

    if not PUBLIC_URL:
        log.error("PUBLIC_URL is empty ‚Äî set it in env")
        raise RuntimeError("No PUBLIC_URL")

    webhook_url = f"{PUBLIC_URL}/webhook"
    await tg_app.bot.set_webhook(
        url=webhook_url,
        secret_token=WEBHOOK_SECRET,      # Telegram –ø—Ä–∏—à–ª—ë—Ç —ç—Ç–æ—Ç —Å–µ–∫—Ä–µ—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        drop_pending_updates=True,        # –Ω–µ —Ç—è–Ω—É—Ç—å ¬´—Å—Ç–∞—Ä—ã–µ¬ª –∞–ø–¥–µ–π—Ç—ã
        allowed_updates=["message", "callback_query"]
    )
    log.info("Webhook set to %s", webhook_url) 

    yield

    # --- –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    tg_app = getattr(app.state, "tg_app", None)
    if tg_app:
        await tg_app.stop()       # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏)
        await tg_app.shutdown()   # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
        log.info("PTB Application stopped")

app = FastAPI(lifespan=lifespan)

@app.get("/healthz")
async def healthz():
    log.debug("Health check requested")
    return {"status": "ok"}

@app.post("/webhook")
async def telegram_webhook(request: Request):
    # NEW: –≤–∏–¥–∏–º, —á—Ç–æ –≤–æ–æ–±—â–µ –¥–æ –Ω–∞—Å –¥–æ—à—ë–ª –∑–∞–ø—Ä–æ—Å –∏ –∫–∞–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏—à–ª–∏
    log.info("Webhook hit: method=%s, headers=%s", request.method, dict(request.headers))

    header_secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if header_secret != WEBHOOK_SECRET:
        log.warning("Webhook header secret mismatch: got=%r expected=%r", header_secret, WEBHOOK_SECRET)
        raise HTTPException(status_code=403, detail="bad header secret")
    log.info("Webhook header OK")

    data = await request.json()
    update = Update.de_json(data, app.state.tg_app.bot)
    await app.state.tg_app.process_update(update)
    log.info("Update forwarded to PTB (ok)")
    return {"ok": True}

@app.get("/webhook-info")
async def webhook_info():
    info = await app.state.tg_app.bot.get_webhook_info()
    # –≤–µ—Ä–Ω—ë–º –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    return {
        "url": info.url,
        "has_custom_certificate": info.has_custom_certificate,
        "pending_update_count": info.pending_update_count,
        "last_error_date": info.last_error_date,
        "last_error_message": info.last_error_message,
        "max_connections": info.max_connections,
        "ip_address": info.ip_address,
    }